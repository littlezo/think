<?php

declare(strict_types=1);

/*
 * #logic 做事不讲究逻辑，再努力也只是重复犯错
 * ## 何为相思：不删不聊不打扰，可否具体点：曾爱过。何为遗憾：你来我往皆过客，可否具体点：再无你。
 * ## 只要思想不滑稽，方法总比苦难多！
 * @version 1.0.0
 * @author @小小只^v^ <littlezov@qq.com>  littlezov@qq.com
 * @contact  littlezov@qq.com
 * @link     https://github.com/littlezo
 * @document https://github.com/littlezo/wiki
 * @license  https://github.com/littlezo/MozillaPublicLicense/blob/main/LICENSE
 *
 */

namespace littler\command\install;

use littler\App;
use think\console\Command;
use think\console\Input;
use think\console\input\Option;
use think\console\Output;

class ModuleServiceDiscoverCommand extends Command
{
	protected function configure()
	{
		$this->setName('lz-service:discover')
			->addOption('module', '-m', Option::VALUE_REQUIRED, 'module name')
			->setDescription('install little module service');
	}

	protected function execute(Input $input, Output $output)
	{
		$module = $input->getOption('module');

		$moduleServices = $this->getServices($module);

		$services = [];
		$servicesPath = root_path() . 'vendor' . DIRECTORY_SEPARATOR . 'services.php';
		if (file_exists($servicesPath)) {
			$services = include $servicesPath;
		}

		$services = array_unique(array_merge($services, $moduleServices));

		$this->exportServices($services, $servicesPath);
	}

	/**
	 * 导出服务
	 *
	 * @param $services
	 * @param $servicesPath
	 */
	protected function exportServices($services, $servicesPath)
	{
		$exportArr = var_export($services, true);

		$currentTime = date('Y-m-d H:i:s');

		file_put_contents(
			$servicesPath,
			<<<PHP
				<?php
				// This file is automatically generated at:{$currentTime}
				declare (strict_types = 1);

				return {$exportArr};
				PHP
		);
	}

	/**
	 * 获取服务
	 *
	 * @param $module
	 * @return array
	 */
	protected function getServices($module)
	{
		if ($module) {
			$moduleInfo = App::getModuleInfo(App::directory() . $module);
			if (isset($moduleInfo['services']) && ! empty($moduleInfo['services'])) {
				return $moduleInfo['enable'] ? $moduleInfo['services'] : [];
			}
			return [];
		}

		return App::getEnabledService();
	}

	/**
	 * 获取模块.
	 *
	 * @param $module
	 * @return array
	 */
	protected function getModules($module)
	{
		$moduleNames = [];

		if (! $module) {
			$modules = App::getModulesDirectory();
			foreach ($modules as $module) {
				$m = explode(DIRECTORY_SEPARATOR, trim($module, DIRECTORY_SEPARATOR));
				$moduleNames[] = array_pop($m);
			}

			return $moduleNames;
		}

		return [$module];
	}
}
